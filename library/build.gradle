apply plugin: 'com.android.library'
//apply plugin: 'com.novoda.bintray-release' // bintray plugin
apply plugin: 'com.github.dcendents.android-maven'

android {
    compileSdkVersion rootProject.compileSdkVersion
    defaultConfig {
        minSdkVersion rootProject.minSdkVersion
        targetSdkVersion rootProject.targetSdkVersion
        versionCode 2
        versionName "1.0.1"
        testInstrumentationRunner "android.support.test.runner.AndroidJUnitRunner"
        ndk {
            abiFilters 'armeabi-v7a', 'arm64-v8a'
            // 'armeabi'
        }
    }

    buildTypes {
        release {
            minifyEnabled true
            zipAlignEnabled true
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
        }
        debug {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
        }
    }

    // 所有资源名称添加前缀 wonders_group_ (图片需手动添加前缀)
    //resourcePrefix 'wonders_group_'

    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }

    lintOptions {
        // 即使有报错也不会停止打包
        abortOnError false
        // 打包Release版本的时候也不进行Lint检测
        checkReleaseBuilds false
        disable 'ProtectedPermissions'
    }

    packagingOptions {
        exclude 'META-INF/MANIFEST.MF'
    }
}

dependencies {
    // include '*.aar' 此种方式会将 libs 中的 aar 包打进 aar 包中，但注意他不会将 values 中的资源合并进去，所以会有问题
    //implementation fileTree(include: ['*.jar', '*.aar'], dir: 'libs')
    //implementation fileTree(include: ['*.jar'], dir: 'libs')
    testImplementation 'junit:junit:4.12'
    androidTestImplementation 'com.android.support.test:runner:1.0.2'
    androidTestImplementation 'com.android.support.test.espresso:espresso-core:3.0.2'
    implementation 'com.android.support.constraint:constraint-layout:1.1.3'
    implementation "com.android.support:appcompat-v7:$rootProject.supportLibraryVersion"
    implementation "com.android.support:gridlayout-v7:$rootProject.supportLibraryVersion"
    implementation "com.android.support:recyclerview-v7:$rootProject.supportLibraryVersion"
    implementation 'com.orhanobut:logger:2.2.0'
    implementation 'com.google.zxing:core:3.3.3'
    implementation 'com.google.code.gson:gson:2.8.5'
    implementation 'com.squareup.retrofit2:retrofit:2.6.1'
    implementation 'com.github.iwgang:countdownview:2.1.3'
    implementation 'com.squareup.retrofit2:converter-gson:2.6.1'
    implementation 'com.github.CymChad:BaseRecyclerViewAdapterHelper:2.9.47'
    implementation 'io.reactivex.rxjava2:rxandroid:2.1.1'
    implementation 'io.reactivex.rxjava2:rxjava:2.2.11'
    implementation 'com.squareup.retrofit2:adapter-rxjava2:2.6.1'
    implementation 'com.alibaba:fastjson:1.1.71.android'
    implementation 'com.squareup.okhttp3:okhttp:3.10.0'
    implementation 'com.squareup.okhttp3:logging-interceptor:3.10.0'
    implementation 'com.jakewharton.rxbinding2:rxbinding:2.2.0'
    implementation 'cn.hutool:hutool-all:4.5.16'
    implementation 'org.bouncycastle:bcprov-jdk15on:1.56'
    implementation 'com.tencent.mm.opensdk:wechat-sdk-android-with-mta:+'

    implementation files('libs/WDPay-3.8.2.jar')
    implementation files('libs/UPPayAssistEx.jar')
    implementation files('libs/UPPayPluginExPro.jar')

    // 此种方式不会将 libs 中的 aar 包打进 aar 包中
    compileOnly(name: 'PALiveDetect4.4.3', ext: 'aar')
    compileOnly(name: 'zj_essc_sdk-2.0.6', ext: 'aar')
    compileOnly(name: 'alipaySdk-15.6.5-20190718211148', ext: 'aar')
}

///**
// * 自定义生成 aar 包的 task
// */
//task makeAar(type: Copy) {
//    // 先删除两个旧的 aar 包的目录
//    doFirst {
//        File file1 = new File('../library/build/aar/')
//        file1.deleteDir()
//        File file2 = new File('../library/build/outputs/aar/')
//        file2.deleteDir()
//    }
//
//    // 复制并重命名文件
//    from '../library/build/outputs/aar/'
//    into '../library/build/aar/'
//    // 使用闭包映射文件名
//    rename { String fileName ->
//        fileName.replace('library', "hzsdk-${releaseTime()}")
//    }
//}
//
///**
// * makeAar task 依赖 assemble
// */
//makeAar.dependsOn(assemble)
//
///**
// * 获取当前的 UTC 时间
// */
//static def releaseTime() {
//    return new Date().format("yyyyMMdd", TimeZone.getTimeZone("UTC"))
//}
//
//tasks.withType(Javadoc) {
//    options.addStringOption('Xdoclint:none', '-quiet')
//    options.addStringOption('encoding', 'UTF-8')
//    options.addStringOption('charSet', 'UTF-8')
//}
//
//task sourcesJar(type: Jar) {
//    from android.sourceSets.main.java.srcDirs
//    classifier = 'sources'
//}
//
//task javadoc(type: Javadoc) {
//    failOnError false
//    source = android.sourceSets.main.java.srcDirs
//    classpath += project.files(android.getBootClasspath().join(File.pathSeparator))
//}
//
//task javadocJar(type: Jar, dependsOn: javadoc) {
//    classifier = 'javadoc'
//    from javadoc.destinationDir
//}
//
//artifacts {
//    archives javadocJar
//    archives sourcesJar
//}
//
//// 发布到 bintray 的版本号
//def releaseVersion = '1.0.1'
//
//publish {
//    // bintray 仓库名
//    repoName = 'WondersGroupZhouShanSdk'
//    // bintray 注册的用户名
//    userOrg = 'wondersgroupandroid863'
//    // implementation 引用时的第 1 部分 groupId
//    groupId = 'com.wondersgroup.android'
//    // implementation 引用时的第 2 部分项目名
//    artifactId = 'WondersGroupZhouShanSdk'
//    // implementation 引用时的第 3 部分版本号
//    publishVersion = releaseVersion
//    // 描述信息
//    desc = 'WondersGroupSdk zhoushan project'
//    // 此处一般为项目的地址，因为它不能识别码云的项目地址，所以此处随便填一个 github 项目地址即可
//    website = 'https://gitee.com/wdhealthmobileandroid/HealthCity_SDK_Wonders.git'
//}
//
//def readProperties(key) {
//    File file = rootProject.file('local.properties')
//    if (file.exists()) {
//        InputStream inputStream = rootProject.file('local.properties').newDataInputStream()
//        Properties properties = new Properties()
//        properties.load(inputStream)
//
//        if (properties.containsKey(key)) {
//            return properties.getProperty(key)
//        }
//    }
//}
//
//task("uploadBintray") {
//    doLast {
//        def command = "../gradlew clean build bintrayUpload -PbintrayUser=wondersgroupandroid863 -PbintrayKey=${readProperties('BINTRAY_KEY')} -PdryRun=false"
//        println "command:" + command
//        try {
//            exec {
//                ExecSpec execSpec -> executable 'bash' args '-c', command
//            }
//            println "uploadBintray success~"
//        } catch (Exception e) {
//            e.printStackTrace()
//        }
//    }
//}

/*
 * 打开Terminal输入命令:
 * ./gradlew assemble
 * 生成 aar 包(打包前修改versionCode & versionName)
 * ./gradlew makeAar （替换 wxpi 包名）
 * 查看 app 依赖库关系：
 * ./gradlew dependencies app:dependencies
 * 合并dev分支，请注意--no-ff参数，表示禁用Fast forward
 * git merge --no-ff -m "merge with no-ff" dev
 * git log看看分支历史：
 * git log --graph --pretty=oneline --abbrev-commit
 * git branch -d feature1
 *
 * 发布到 bintray
 * Mac 执行如下命令：
 * ./gradlew :library:uploadBintray
 * Windows 执行如下命令：
 * gradlew clean build bintrayUpload -PbintrayUser=wondersgroupandroid863 -PbintrayKey=e4ba8b931617cb82f6ec1459cd26163a1de695b3 -PdryRun=false
 */
