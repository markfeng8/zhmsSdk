apply plugin: 'com.android.application'
apply plugin: 'bugly'

bugly {
    // 注册时分配的 App ID
    appId = '0010f85d4e'
    // 注册时分配的 App Key
    appKey = 'a63c1421-aa92-4920-9628-3a6653bc119e'
}

////////////////////////////////////////////////////////////////////////////////////////////////////
def appVersionCode = 135 // code 每次 + 1 递增
def appVersionName = '2.12.12' // 第一部分为年份，第二部分为月份，第三部分为当月小版本更新

static def getUpdateDescription() {
    return '1.上传新版本;\n2.代码优化;'
}
////////////////////////////////////////////////////////////////////////////////////////////////////

android {
    useLibrary 'org.apache.http.legacy'
    compileSdkVersion rootProject.compileSdkVersion
    defaultConfig {
        applicationId "com.wondersgroup.android.healthcity_sdk"
        minSdkVersion rootProject.minSdkVersion
        targetSdkVersion rootProject.targetSdkVersion
        versionCode appVersionCode
        versionName appVersionName
        testInstrumentationRunner "android.support.test.runner.AndroidJUnitRunner"
        multiDexEnabled true
        ndk {
            abiFilters 'armeabi-v7a'
            // 'armeabi', 'arm64-v8a'
        }
    }

    signingConfigs {
        debug {
            storeFile file("wondersgroup_sdk.jks")
            storePassword 'wondersgroup_android'
            keyAlias 'wondersgroup_android'
            keyPassword 'wondersgroup_android'
        }
        release {
            storeFile file("wondersgroup_sdk.jks")
            storePassword 'wondersgroup_android'
            keyAlias 'wondersgroup_android'
            keyPassword 'wondersgroup_android'
        }
    }

    buildTypes {
        debug {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
            signingConfig signingConfigs.debug
        }
        release {
            minifyEnabled true
            zipAlignEnabled true
            shrinkResources true
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
            signingConfig signingConfigs.release
            android.applicationVariants.all { variant ->
                variant.outputs.all {
                    outputFileName = getApkName()
                }
            }
        }
    }

    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }

    lintOptions {
        abortOnError false
        disable 'GoogleAppIndexingWarning'
    }
}

dependencies {
    implementation fileTree(include: ['*.jar'], dir: 'libs')
    implementation 'com.android.support.constraint:constraint-layout:1.1.3'
    testImplementation 'junit:junit:4.12'
    androidTestImplementation 'com.android.support.test:runner:1.0.2'
    androidTestImplementation 'com.android.support.test.espresso:espresso-core:3.0.2'
    implementation('com.jakewharton:butterknife:8.8.1', {
        exclude group: "com.android.support"
    })
    implementation 'com.android.support:multidex:1.0.3'
    annotationProcessor 'com.jakewharton:butterknife-compiler:8.8.1'
    implementation 'com.tencent.bugly:crashreport:latest.release'
    implementation "com.android.support:appcompat-v7:$rootProject.supportLibraryVersion"
    implementation "com.android.support:recyclerview-v7:$rootProject.supportLibraryVersion"
    implementation 'com.github.CymChad:BaseRecyclerViewAdapterHelper:2.9.47'
    implementation 'com.xsir:PgyerAndroidAppUpdate:1.0.1'

    implementation(name: 'PALiveDetect4.4.3', ext: 'aar')
    implementation(name: 'zj_essc_sdk-2.0.6', ext: 'aar')
    implementation(name: 'alipaySdk-15.6.5-20190718211148', ext: 'aar')
//    implementation 'com.wondersgroup.android:WondersGroupSdk:0.1.22'
    implementation project(':library')
}

def getApkFullPath() {
    return rootDir.getAbsolutePath() + "/app/build/outputs/apk/release/" + getApkName()
}

def getApkName() {
    return "ZS-SDK-example-V${android.defaultConfig.versionName}-${releaseTime()}.apk"
}

static def releaseTime() {
    return new Date().format("yyyy-MM-dd", TimeZone.getTimeZone("UTC"))
}

def readProperties(key) {
    File file = rootProject.file('local.properties')
    if (file.exists()) {
        InputStream inputStream = rootProject.file('local.properties').newDataInputStream()
        Properties properties = new Properties()
        properties.load(inputStream)

        if (properties.containsKey(key)) {
            return properties.getProperty(key)
        }
    }
}

task("uploadApk") {
    doLast {
        //def command = "curl -F \"file=@${getApkFullPath()}\" -F \"uKey=${readProperties('pgyer.userKey')}\" -F \"_api_key=${readProperties('pgyer.apiKey')}\" -F \"buildUpdateDescription=${getUpdateDescription()}\" https://www.pgyer.com/apiv2/app/upload"
        def command = "curl -F \"file=@${getApkFullPath()}\" -F \"_api_key=${readProperties('pgyer.apiKey')}\" -F \"buildInstallType=4\" -F \"buildInstallQuestoin=1+1=?\" -F \"buildInstallAnswer=2\" -F \"buildUpdateDescription=${getUpdateDescription()}\" https://www.pgyer.com/apiv2/app/upload"
        exeCommand(command)
    }
}

uploadApk.dependsOn("assembleRelease")

task("installApk") {
    doLast {
        def command = "adb install -r ${getApkFullPath()}"
        exeCommand(command)
    }
}

task("launchApp") {
    doLast {
        def command = "adb shell am start ${android.defaultConfig.applicationId}/.MainActivity"
        exeCommand(command)
    }
}

//launchApp.dependsOn("installApk")

def exeCommand(command) {
    println "command:" + command

    try {
        exec {
            ExecSpec execSpec -> executable 'bash' args '-c', command
        }
        println "command execute success~"
    } catch (Exception e) {
        e.printStackTrace()
    }
}

/*
 * 打包命令：
 * ./gradlew assembleRelease
 * 打包上传 APK:
 * ./gradlew :app:uploadApk
 * 安装 APK:
 * ./gradlew :app:installApk
 * 启动 APK:
 * ./gradlew :app:launchApp
 */
